(* ::Package:: *)

BeginPackage["BIGParserAndMerger`"];


(* ::Section:: *)
(*Usage messages*)


ImportBIG::usage =
"ImportBIG[name, p0, a0, depol, fourierFunc] will read a .big file (name) and calculate Psi and
Delta assuming polarizer and analyzer zero corrections p0 and a0 expressed in degrees; with a
degree of depolarization 0<depol<1. fourierFunc specifies how to process the I(A) dependence.";

ImportVASE::usage =
"ImportVASE[name] will import a Woollam VASE datafile.";

ImportEPD::usage =
"ImportEPD[name] will import a CSV file in the EPD format (the compensator data format as generated by MAB2PD)."

MergingInterface::usage = 
"MergingInterface[] opens a GUI for interactive selection and loading of .big/Woollam files.";

PolarizerAnalyzerCorrection::usage =
"PolarizerAnalyzerCorrection[ArcTan[rho1], ArcTan[rho2], pola1, pola2], where pola_i and rho_i
are the polarizer azimuths and complex reflectance ratios of two measurements, finds the P0/A0
corrections for this pair of measurements, averaged over the complete spectral range."


(* ::Subsection:: *)
(*Setting context before doing definitions*)


Unprotect[Evaluate[$Context<>"*"]];


Begin["`Private`"];


(* ::Section:: *)
(*Private definitions*)


(*AnalyzerCorrection = (ArcTan[-Coth[Im[#1-#2]] Tan[Re[#1-#2]] Tanh[Im[#1+#2]]]+Re[#1+#2])/2 &;*)


(*PolarizerCorrection = With[
		{aCorr = AnalyzerCorrection[#1, #2]},
		ArcSin[((Tan[#1 - aCorr] + Tan[#2 - aCorr])/(Tan[#2 - aCorr] - Tan[#1 - aCorr]))*Sin[#3 - #4] + #3 + #4]/2
		] &;*)


(* PolarizerAnalyzerCorrection =
	With[
		{aCorr = Re@Mean[AnalyzerCorrection[#1, #2]]},
		{-Re@Mean@Chop[ArcSin[((Tan[#1 - aCorr] + Tan[#2 - aCorr])/(Tan[#2 - aCorr] - Tan[#1 - aCorr]))*Sin[#3 - #4] + #3 + #4]/2], aCorr}
		] &;
*)
(*PolarizerAnalyzerCorrection = Function[{rhoShort1,rhoShort2,pola1,pola2},
With[{anaCorr=Re@Mean@AnalyzerCorrection[rhoShort1,rhoShort2]},
With[{k=Tan[rhoShort2-anaCorr]/Tan[rhoShort1-anaCorr],P1=Tan[pola1],P2=Tan[pola2]},
{((1 - k)*(1 - P1*P2) - Sqrt[-4*k*(P1 - P2)^2 + (-1 + k)^2*(1 + P1*P2)^2])/(2*k*P1 - 2*P2)//Re//Mean,-anaCorr}]]];*)


(* NormalizedFourier =
	Compile[{{mean, _Real}, {coef, _Complex}, {depol, _Real}},
		If[mean<=0., .4999999 Sign[coef],
			With[
				{co = Divide[coef, mean Subtract[1., Min[Max[0., depol], .999]]]},
				Max[Min[Abs[co],.4999999],.0000001] Sign[co]
			]
		],
		RuntimeAttributes->Listable, RuntimeOptions->"Speed", CompilationTarget->"C", Parallelization->True]; *)


(*NormalizedRhoShort = With[{s = Subtract, d = Divide},
	Compile[{{fo, _Complex, 0}, {sgn, _Integer, 0}},
		Block[{div=s[.5, Re[fo]],f = 0.-1.*^-7 I}, If[fo\[NotEqual]0.+0.I,f = fo]; Return[ArcTan[d[Im[f],div]+I sgn d[Sqrt[s[.25,Abs[f]^2]],div]]]],
		RuntimeAttributes\[Rule]{Listable}, CompilationTarget\[Rule]"C", Parallelization\[Rule]True,
		RuntimeOptions\[Rule]{"EvaluateSymbolically" \[Rule] False, "CatchMachineOverflow"\[Rule]False, "CatchMachineUnderflow"\[Rule]False}]
];*)


(*NormalizedWeight =
	Compile[{{mean, _Real}, {coef, _Real}, {noise, _Real}},
		If[mean <= 0., 1.*^-7, Sqrt[Subtract[1., coef]] Divide[mean, noise]^2],
		RuntimeAttributes->Listable, RuntimeOptions->"Speed", CompilationTarget->"C", Parallelization->True];*)


(*Total[Apply[ana[assoc[#1, "RhoShort"], assoc[#2, "RhoShort"]]*assoc[#1, "Weight"]*assoc[#2, "Weight"]*Abs[assoc[#1, "POLA"] - assoc[#2, "POLA"]] & , 
    Tuples[{Range[4], Range[5, 8]}], {1}]]/Total[Apply[assoc[#1, "Weight"]*assoc[#2, "Weight"]*Abs[assoc[#1, "POLA"] - assoc[#2, "POLA"]] & , 
    Tuples[{Range[4], Range[5, 8]}], {1}]]*)


SmartMerge =
	Compile[{{x1,_Real,1},{x2,_Real,1}},
		With[{
				mat=Outer[Subtract,x1,x2]//UnitStep,
				l1=Length[x1],l2=Length[x2],
				head=First[x2]-x1//UnitStep//Total,
				tail=Last[x1]-x2//UnitStep//Total},
			Block[{
					i=head+1,
					k=0,l=head+1,
					lst=Table[0.,{l1+l2}]},
				If[head>0,lst[[1;;head]]=x1[[1;;head]]];
				If[tail<l2,lst[[l1+tail+1;;l1+l2]]=x2[[tail+1;;l2]]];

				If[head==l1,Return[lst]];

				While[k<tail,
					While[mat[[i,k+1]]==0.,lst[[l++]]=x1[[i++]]];
					While[k<tail&&mat[[i,k+1]]==1.,lst[[l++]]=x2[[++k]]];
				];
				lst[[l;;l+l1-i]]=x1[[i;;l1]];
				lst
			]
		],
	CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];


SmartMergeY =
	Compile[{{x1,_Real,1},{x2,_Real,1},{y,_Real,2}},
		If[Length[x1]==0||Length[x1]!=Length[y],Return[{Most[{0.}]}]];
		If[Length[x2]==0,Return[y]];
		With[{
				mat=Outer[Subtract,x1,x2]//UnitStep,
				l1=Length[x1],l2=Length[x2],
				head=First[x2]-x1//UnitStep//Total,
				tail=Last[x1]-x2//UnitStep//Total},
			Block[{
					i=head+1,
					k=0,l=head+1,
					lst=RandomReal[3.*^-7,{l1+l2,20}]},
				If[head>0,lst[[1;;head]]=y[[1;;head]]];
				
				If[head==l1,Return[lst]];

				While[k<tail,
					While[mat[[i,k+1]]==0.,lst[[l++]]=y[[i++]]];
					While[
						k<tail&&mat[[i,k+1]]==1.,
						If[
							i>1,
							lst[[l++]]=y[[i-1]]+(y[[i]]-y[[i-1]])(x2[[++k]]-x1[[i-1]])/(x1[[i]]-x1[[i-1]]),
							l++; k++
						]
					]
				];
				lst[[l;;l+l1-i]]=y[[i;;l1]];
				lst
			]
		]
	];


ImportEPD[name_String]:=
	With[{strm = OpenRead[name, BinaryFormat->True]},
		ReadList[strm, String, 3];
		Block[{assoc = <||>, out},
			out = Partition[Map[Internal`StringToDouble, StringSplit[ReadString[strm], Alternatives[",","\r","\n"," "]..]], 5][[;;,{1,2,3}]] // Transpose;
			Close[strm];
			assoc["X"] = out[[1]];
			assoc["Rho"] = Tan[out[[2]] Degree] Exp[I out[[3]] Degree];
			assoc
		]
	]


ImportBIG[names_, p0_, a0_, depol_, four_] := ImportBIG[names, N@p0, N@a0, N@depol, four]
ImportBIG[names_List, p0_Real, a0_Real, depol_, fourierFunc_]:=
	With[
		{strm = OpenRead[#, BinaryFormat->True] & /@ names , n = Length[names],
			fft = (Exp[2 I a0 Degree - 2 I Pi (-1+(ConstantArray[0.I,20]+Range[20]))2/20])/20,
			noise = Exp[2. Pi I KroneckerProduct[Range[3.,9.],Range[0.,19.]]/20]/20
		},
		Block[{th, pola, table, table2, tableN, x, comment, ipol, assoc = <||>, depol2 = ReleaseHold@depol},
			Do[assoc[idx] = <||>, {idx, n}];
			assoc["Meta"] = <|"N" -> n|>; assoc["Full"] = <||>;
			Do[
				Block[{line = First @ ReadList[strm[[idx]], String, 1]},
					{comment, line} = StringSplit[line, ", T="];
					{th,pola} =
						N@Degree({0, -p0} + ToExpression /@ (StringSplit[StringSplit[line,","],"/"][[-2]]));
					ReadList[strm[[idx]], String, 2];
				]
				If[idx == 1, assoc["Meta","Comment"] = comment; assoc["Meta", "Type"] = "BIG"; assoc["Full","AOI"]=th];
				assoc[idx, "POLA"] = pola,
				{idx, n}
			];
			Do[
				table = 
					Partition[
						Internal`StringToDouble /@
							StringCases[StringReplace[ReadString[strm[[idx]]], {"\r\n"->"", "\r"->"", "\n"->""}], Repeated[_,10]] //
								Developer`ToPackedArray,
						21
					] // SortBy[First] // Transpose;
				assoc[idx, "XRaw"] = First @ table;
				assoc[idx, "YRaw"] = Rest @ table // Transpose;
				(*If[idx == 1, assoc["Full", "X"] = assoc[1, "X"]; assoc["Meta", "Length"] = Length[assoc["Full", "X"]]];
				If[assoc[idx, "X"] != assoc["Full", "X"],
					ipol = ListInterpolation[#, {MinMax[assoc[idx, "X"]]}] & /@ assoc[idx, "YRaw"];
						assoc[idx, "Y"] = Through[ipol[#]] & /@ assoc["Full", "X"] // Transpose // Developer`ToPackedArray,
					assoc[idx, "Y"] = assoc[idx, "YRaw"]
				];*)
				Close[strm[[idx]]],
				{idx, n}
			];
			Do[
				With[{pos=Transpose[{Pick[Range@Length@assoc[idx, "YRaw"], UnitStep[-Total[assoc[idx, "YRaw"], {2}]], 1]}]},
					assoc[idx, "YRaw"] = Delete[assoc[idx, "YRaw"], pos];
					assoc[idx, "XRaw"] = Delete[assoc[idx, "XRaw"], pos]];,
				{idx, n}];
			assoc["Full", "X"] = Union @@ assoc[[1 ;; n, "XRaw"]];
			assoc["Meta", "Length"] = Length[assoc["Full", "X"]];
			Do[
				assoc[idx, "Y"] = 
					SmartMergeY[
						assoc[idx, "XRaw"],
						Complement[assoc["Full", "X"], assoc[idx, "XRaw"]],
						assoc[idx, "YRaw"]
					] // Transpose;
				assoc[idx, "X"] = assoc["Full", "X"],
				{idx, n}];
			Do[
				If[Head[depol2] === Function, depol2 = depol2[assoc[idx, "X"]]];
				If[Head[depol2] === List && Length[depol2] =!= Length[assoc[idx, "X"]], depol2 = 0.];
				table = Mean[assoc[idx, "Y"]];
				table2 = fft.assoc[idx, "Y"];
				tableN = (noise.assoc[idx, "Y"] // Abs // Mean) + 1.*^-7;
				If[fourierFunc == "Detector",
					Null,
					assoc[idx, "Fourier"] = Divide[Divide[table2, table]//Clip[Abs@#,{1.*-7,0.4999999}]Exp[I Arg@#]&, Clip[1 - depol2, {0.001,1.}]]
				];
				(* assoc[idx, "Weight"] = 1.*^-7 + Sqrt[UnitStep[table] table Abs[1-Abs[2 table2/table]^2]] (table/tableN)^2; *)
				assoc[idx, "Weight"] =
					Clip[Re[Sqrt[Subtract[1,Abs[2 assoc[idx, "Fourier"]]^2]]] Divide[table,tableN]^2,{1.*^-7,Infinity}];
				assoc[idx, "RhoShort"] =
					With[{s = Subtract, d = Divide, fo=assoc[idx, "Fourier"],sgn=-Sign@assoc[idx,"POLA"]},
						Block[
							{div=s[.5, Re[fo]],f=(Unitize@fo-1)RandomComplex[{-1-I,1+I},Length@fo]*10^-7+fo},
							ArcTan[d[Im[f],div]+I sgn d[Sqrt[s[.25,Abs[f]^2]],div]]
						]
					];
				assoc[idx, "Rho"] = Tan[assoc[idx, "RhoShort"]] Tan[assoc[idx, "POLA"]],
				{idx, n}
			];
			assoc["Full", "RhoShort"] = assoc[[;;n, "RhoShort"]] // Values;
			assoc["Full", "Weight"] = assoc[[;;n, "Weight"]] // Values;
			assoc["Full", "TotalWeight"] = assoc["Full", "Weight"] // Total;
			assoc["Full", "POLA"] = assoc[[;;n, "POLA"]] // Values;
			assoc
		]
	];


ImportVASE[name_List]:=ImportVASE[First@name];
ImportVASE[name_String]:=
	With[
		{imported = ReadString[name] // StringSplit[#, {"\r\neV\r\n", "\r\ndpolE"}] & // StringSplit[# ,{"\t", "\r\n"}] &},
		Block[
			{
				assoc=
					<|
						1 -> <|"POLA" -> 45. Degree, "X" -> 1., "Weight" -> 1., "RhoShort" -> 1. + 0. I, "Rho" -> 1. + 0. I|>
					|>,
				table=(Partition[Internal`StringToDouble/@imported[[2]]
					// Developer`ToPackedArray,6]
					// SortBy[{#[[2]]&,First}]
					// SplitBy[#,#[[2]]&]&
					// Transpose/@#&
					// Developer`ToPackedArray)
			},
		table[[;;,1]]*=8065.55;
		table[[;;,4]]=Mod[table[[;;,4]],360];
		table[[;;,2;;]]*=Degree;
		(assoc[#]=assoc[1])&/@Range[Length[table]];
		assoc["Full"]= <|"AOI" -> 70. Degree, "X" -> 1., "RhoShort" -> 1., "Weight" -> 1., "TotalWeight" -> 1., "POLA" -> Table[45. Degree, Length@table]|>;
		assoc["Meta"]= <|"N"->Length[table], "Comment"->imported[[1,1]], "Type" -> "VASE"|>;
		Do[
		assoc[i,"X"]=table[[i,1]];
		assoc[i,"Rho"]=Tan[table[[i,3]]]Exp[-I  table[[i,4]]];
		assoc[i,"RhoShort"]=ArcTan[1,assoc[i,"Rho"]];
		assoc[i,"Weight"]=With[{r=table[[i,3]],dr=table[[i,5]],dth=table[[i,6]]},Cos[r](dr^2+dth^2 Sin[2r]^2/4)^(-1/2)];
		assoc[i,"AOI"]=table[[i,2,1]];
		assoc[i,"Eps"]=With[{th=assoc[i,"AOI"],rho=assoc[i,"Rho"]},Sin[th]^2(1.+(Divide[1-rho,1+rho]Tan[th])^2)]
		,{i,Length[table]}];
			assoc["Full","AOI"]=assoc[[;;Length[table],"AOI"]]//MinimalBy[#,Abs[#-70.Degree]&]&//Max;
			assoc["Full","X"]=Union@@assoc[[;;Length[table],"X"]];
			assoc["Meta", "Length"] = Length[assoc["Full", "X"]];
			assoc["Full","Weight"]=assoc[[;;Length[table],"Weight"]]//Values//PadLeft[#,Automatic,1.*^-7]&//Developer`ToPackedArray;
			assoc["Full","TotalWeight"]=assoc["Full","Weight"]//Total;
			assoc["Full","RhoShort"]=With[
		{eps=assoc[[;;Length[table],"Eps"]]//Values//PadLeft[#,Automatic,1.+0.I]&//Developer`ToPackedArray,th=Cos[assoc["Full","AOI"]]},
		With[{sqrt=Sqrt[eps+th^2-1]},ArcTan[1,Divide[(sqrt-eps th)(sqrt+th),(sqrt+eps th)(sqrt-th)]]]];
			assoc
		]
	]


(* ::Subsection:: *)
(*Merging GUI*)


Begin["`MergingInterface`"];


$PackageDirectory = DirectoryName[$InputFileName];


scanDir[dir_] := With[{currentDir = Directory[]},
	SetDirectory[$PackageDirectory];
	Run["scanDir.exe","\""<>#<>"\"",IntegerString[Hash[#],36],IntegerString[Hash[FileNames["*.big",#]],36]]&[dir];
	SetDirectory[currentDir];
	With[{strm = OpenRead[FileNameJoin[{$PackageDirectory,"cache", IntegerString[Hash[dir],36]}]]},
		ReadList[strm, String, 1];
		Block[{out = ReadList[strm,{Word,Word,Number,Number,Number,Number,Number,Number,Number,Word},WordSeparators->{"\t"}]},
			Close[strm];
			out
		]
	]]


mergingComplete=False;


saveParams = <|"Energy" -> (#&), "Psi" -> True, "Del" -> True, "Eps1" -> True, "Eps2" -> True, "Sig1" -> True, "Sig2" -> True, "AOI" -> True, "Header" -> True|>


(* phase = Compile[{{l,_Complex,1}},FoldList[Function[{prev,new},#+Round[prev-#,2 Pi]&@Arg@new],Arg@First@l,Rest@l],RuntimeOptions->"Speed"]; *)


findA0 = Compile[{{rs,_Complex,2},{w,_Real,2}},
		Block[
			{step=.157,a0=0.,norm=Most[{0.}]},
			Do[
				norm =
					Table[
						With[
							{try=Mod[Arg[(Tan[rs] - Tan[ta0])/(1 + Tan[rs] Tan[ta0])],Pi]},
							Total@Total@Abs[Transpose[Transpose[try]-Mean[try]]w]
						],
						{ta0,a0-8step,a0+8step,step}
					];
				a0 = a0 - (9 - First@Ordering@norm)step; step = step/16,
				{5}
			];
			a0], RuntimeOptions->"Speed", Parallelization->True, CompilationTarget->"C"];


findP0 = Compile[{{rs,_Complex,2},{w,_Real,2},{pola,_Real,1},{a0,_Real}},
		With[
			{trs=Tan[rs-a0]},
			Block[
				{step=.157,p0=0.,norm=Most[{0.}]},
				Do[
					norm = 
						Table[
							With[
								{try=Cot[pola-tp0]},
								(Transpose[Transpose[Abs[trs]Sign[pola]]/Total[Abs[trs]]]-(try/Total[Abs[try]]))w//Abs//Total//Total
							],
							{tp0,p0-8step,p0+8step,step}
						];
					p0 = p0 - (9 - First@Ordering@norm)step; step = step/16;,
					{5}
				];
				p0]], RuntimeOptions->"Speed", Parallelization->True, CompilationTarget->"C"];


FindCorrectionsRoutine[idx_] :=
	Module[{}, If[Length@Database[idx, "Files"] < 2, Return[]]; (*If just one file, don't even load*)
		With[
			{assoc=ImportBIG[Database[idx, "Files"], Database[idx, "Init", "P0"], Database[idx, "Init", "A0"], Database[idx, "Init", "Depol"], 0.]},
			If[-Subtract@@MinMax[assoc["Full", "POLA"]] < 1. Degree, Return[]]; (* If small range of pola angles, abort*)
			With[
				{rs = assoc["Full", "RhoShort"], w = assoc["Full", "Weight"], pola = assoc["Full", "POLA"]},
				With[
					{a0 = findA0[rs, w]},
					{Database[idx, "Init", "P0"], Database[idx, "Init", "A0"]} += ({findP0[rs,w,pola,a0]/Degree, a0/Degree} // Round[#, .01]&)
				]
			]
		]
	]


FindCorrectionsRoutine[idx_, "Comp"] :=
	Module[{}, If[Length@Database[idx, "Comp", "Files"] < 2, Return[]]; (*If just one file, don't even load*)
		With[
			{assoc=ImportBIG[Database[idx, "Comp", "Files"], Database[idx, "Comp", "P0"], Database[idx, "Comp", "A0"], 0., 0.]},
			If[-Subtract@@MinMax[assoc["Full", "POLA"]] < 1. Degree, Return[]]; (* If small range of pola angles, abort*)
			With[
				{rs = assoc["Full", "RhoShort"], w = assoc["Full", "Weight"], pola = assoc["Full", "POLA"]},
				With[
					{a0 = findA0[rs, w]},
					{Database[idx, "Comp", "P0"], Database[idx, "Comp", "A0"]} += ({findP0[rs,w,pola,a0]/Degree, a0/Degree} // Round[#, .01]&)
				]
			]
		]
	]


SmartResample=
	Compile[{{xS,_Real,1},{xT,_Real,1},{y,_Complex,1}},
		If[Length[xS]==0||Length[xS]!=Length[y],Return[Table[1.+0.I,{Length[xT]}]]];
		If[Length[xT]==0,Return[Most[{1.+0.I}]]];
		With[{
			head=Length[xT]-(xT-First[xS]//UnitStep//Total),
			tail=Length[xT]-(Last[xS]-xT//UnitStep//Total),
			pad=Mean[y],
			l=Length[xT]},
		Block[{out=Table[pad,{l}],i=head+1,j=1},
			While[xS[[j+1]]<xT[[i]],j++];
			While[i<=l-tail,
				If[xT[[i]]<=xS[[j+1]],With[{s=((xT[[i]]-xS[[j]])/(xS[[j+1]]-xS[[j]]))},out[[i++]]=y[[j]]+(y[[j+1]]-y[[j]])s],j++]
			];
		out
		]
		],
	CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];


TransferResample =
	With[{s = Subtract, d = Divide},
		Compile[{{xL,_Real,1},{yL,_Real,1},{xR,_Real,1},{yR,_Real,1}},
			With[
				{
					outL=Length[xL]+Length[xR],lL=Length[xL],lR=Length[xR],end=Last@xL,start=First@xR,union=Sort[Join[xL,xR]],
					yyL=Join[{First@yL},yL],
					yyR=Join[yR,{Last@yR}],
					xxL=Join[{First[xR]},xL],
					xxR=Join[xR,{Last[xL]}]
				},
				With[{transfer=Cos[d[s[union,start],s[end,start]]d[Pi,2]]^2},
					Block[{out=Table[0.,{2},{outL}],yOutL=Table[0.,{outL}],yOutR=Table[0.,{outL}],outIdx,lIdx=1,rIdx=1},
						out[[1]]=union;
						For[outIdx=1,rIdx<=lR,outIdx++,
							If[xxL[[lIdx+1]]<xxR[[rIdx]],
								yOutL[[outIdx]] = yyL[[lIdx+1]];
								yOutR[[outIdx]] =
									yyR[[s[rIdx,1]]] +
										s[yyR[[rIdx]],yyR[[s[rIdx,1]]]]d[s[xxL[[lIdx+1]],xxR[[s[rIdx,1]]]],s[xxR[[rIdx]],xxR[[s[rIdx,1]]]]];
								lIdx++,
								If[xxL[[lIdx+1]]>xxR[[rIdx]],
									yOutR[[outIdx]] = yyR[[rIdx]];
									yOutL[[outIdx]] = yyL[[lIdx]] +
										s[yyL[[lIdx+1]],yyL[[lIdx]]]d[s[xxR[[rIdx]],xxL[[lIdx]]],s[xxL[[lIdx+1]],xxL[[lIdx]]]];
									rIdx++,
									If[xxL[[lIdx+1]]==xxR[[rIdx]],
										yOutL[[outIdx]]=yyL[[lIdx+1]];
										yOutR[[outIdx]]=yyR[[rIdx]];
										outIdx++;
										yOutL[[outIdx]]=yyL[[lIdx+1]];
										yOutR[[outIdx]]=yyR[[rIdx]];
										lIdx++;rIdx++
									]
								]
							]
						];
						While[lIdx<=lL,
							yOutL[[outIdx]]=yyL[[lIdx+1]];
							yOutR[[outIdx]] =
								yyR[[s[rIdx,1]]] +
									s[yyR[[rIdx]],yyR[[s[rIdx,1]]]]d[s[xxL[[lIdx+1]],xxR[[s[rIdx,1]]]],s[xxR[[rIdx]],xxR[[s[rIdx,1]]]]];
							lIdx++;outIdx++];
						out[[2]]=yOutL*transfer+yOutR*s[1,transfer];
						out
					]
				]
			],
		CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True]
	];


LeftData = 
	Compile[
		{{xL,_Real,1},{xR,_Real,1},{yL,_Real,1},{yR,_Real,1}},
		{xL,yL}[[1;;2,1;;Subtract[Length[xL],Total[UnitStep[Subtract[xL,First[xR]]]]]]]
		, CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
RightData =
	Compile[
		{{xL,_Real,1},{xR,_Real,1},{yL,_Real,1},{yR,_Real,1}},
		{xR,yR}[[1;;2,Subtract[Total[UnitStep[Subtract[Last[xL],xR]]],Length[xR]];;-1]]
		, CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
MiddleDataL =
	Compile[
		{{xL,_Real,1},{xR,_Real,1},{yL,_Real,1},{yR,_Real,1}},
		{xL,yL}[[1;;2,-Total[UnitStep[Subtract[xL,First[xR]]]];;-1]]
		, CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
MiddleDataR =
	Compile[
		{{xL,_Real,1},{xR,_Real,1},{yL,_Real,1},{yR,_Real,1}},
		{xR,yR}[[1;;2,1;;Total[UnitStep[Subtract[Last[xL],xR]]]]]
		, CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
MiddleDataTransfer[xL_,xR_,yL_,yR_]:=
	If[
		Max[xL] > Min[xR],
		With[{data=Join[MiddleDataL[xL,xR,yL,yR],MiddleDataR[xL,xR,yL,yR]]}, TransferResample@@data],
		{{xL[[#]],xR[[#2]]},{yL[[#]],yR[[#2]]}}&[Ordering[xL][[-1]],Ordering[xR][[1]]]
	]


TabIdx = 1;


Database = <||>;


$DBIRStructure = 
	<|
		"Files" -> {},
		"Init" -> <|
			"P0" -> 0.,
			"A0" -> 0.,
			"Depol" -> 0. |>,
		"Comp" -> <|
			"Type" -> 0,
			"Files" -> {},
			"P0" -> 0.,
			"A0" -> 0. |>,
		"Corr" -> <|
			"P0" -> 0.,
			"A0" -> 0.,
			"Depol" -> 0.,
			"dTh" -> 0.,
			"Left" -> 0.,
			"Right" -> 0.,
			"Comp" -> 1. + 0. I,
			"dComp" -> 1. + 0. I |>,
		"Flags" -> <|
			"CoerceDelta" -> False,
			"InvertComp" -> False |>
	|>;

$DBVISStructure = Block[{$DBIRStructure = $DBIRStructure}, Unset[$DBIRStructure["Comp"]]; $DBIRStructure];


funSel = {psiC, deltaC};
xSel=#&;
plotFunc = ListPlot;


$MessageRanges =
"Select the number of datasets of .big files on the left slider and the number of Woollam datasets on the right slider.";


ToExportTab[] := Button["Next >>", mergingComplete = True; TabIdx++, BaseStyle -> {16, GrayLevel[.75], FontFamily -> "Consolas"}, Background -> Purple];
BackButton[] := Button["<< Back", TabIdx--, BaseStyle -> {16, GrayLevel[.75], FontFamily -> "Consolas"}, Background -> Purple];
FromExportTab[] := Button["<< Back", merginComplete = False; TabIdx--, BaseStyle -> {16, GrayLevel[.75], FontFamily -> "Consolas"}, Background -> Purple]


RangesButton[] :=
	Button[
		"Next >>",
		Do[Database[idx] = Join[$DBIRStructure, Lookup[Database, idx, <||>]], {idx, IRRanges}];
		Do[Database[idx] = Join[$DBVISStructure, Lookup[Database, idx, <||>]], {idx, IRRanges + 1, IRRanges + VISRanges}];
		TabIdx++,
		BaseStyle -> {16, GrayLevel[.75], FontFamily -> "Consolas"}, Background -> Purple
	];


MessageBox[str_, size:{_Integer,_Integer}] :=
	InputField[
		str, String, Enabled->False, Background -> Black,
		BaseStyle -> {16, GrayLevel[0.75], FontFamily -> "Consolas"},
		ImageSize -> {15, 25} * size, ImageMargins -> 0];


ScrollBox[str_, size:{_Integer,_Integer}] :=
	Framed[
		Pane[
			InputField[str, String, Appearance->None, FieldSize->{First@size, {1, Infinity}}, Enabled->False, Background->Black,
				BaseStyle -> {16, GrayLevel[0.75], FontFamily -> "Consolas"}],
			ImageSize-> {15, 25} * size, ImageMargins->0, AppearanceElements->{}, Scrollbars->{False,True}],
		Background->Black,FrameMargins->0, FrameStyle->Gray
	]
			


SetAttributes[StyledField, HoldAll];
StyledField[a_, b_, d___] := InputField[a, b, Background -> Black, BaseStyle -> {16, GrayLevel[0.75], FontFamily -> "Consolas"}, d];


IRRanges = 0;
VISRanges = 0;


Ranges[] := 
	Grid[
			{
				{
					MessageBox[$MessageRanges, {40, 2}], SpanFromLeft 
				},
				{
					MessageBox["FTIR .big-file ranges", {20,1}],
					MessageBox["Woollam ranges", {20, 1}]
				},
				{
					Row[{Slider[Dynamic[IRRanges], {0, 6, 1}, Background -> Black], Dynamic[MessageBox[ToString@IRRanges,{3,1}]]}, BaselinePosition->Center],
					Row[{Slider[Dynamic[VISRanges], {0, 3, 1}, Background -> Black], Dynamic[MessageBox[ToString@VISRanges,{3,1}]]}, BaselinePosition->Center]
				},
				{OpenFileButton[], RangesButton[]}
			},
			Spacings -> {0, 0},
			ItemSize -> Full, Frame -> All, Background -> Black
		]
	(*Column[{

			Row[{
				InputField[Dynamic[irrangelist],String],
				InputField[Dynamic[visrangelist],Expression]
			}],
			Button["Next >>",rangelist=irrangelist~Join~visrangelist;tabindex++;]
		}]*)


$MessageFileSelect = 
"Select data files and compensator files. Multiple files can be selected within the file selection dialog.
When using a referenced compensator (that is a simulated compensator that uses a measurement without a compensator
at the same AOI and range as a reference to correctly pick the sign of the shift in Delta),
please manually specify the name of the range it is referenced to in the following format:
{\"refcomp\",\"FIR\"} in the text field to the right. Don't worry that the selection of the radio button disappears.
As before, the input format for the text fields is a list of strings in Mathematica syntax, except for Woollam data
files where only a single filename is to be given. Filenames are to be given with their full path. Use the \"Browse\"
buttons for convenience." // StringReplace[#, "\n" -> " "]&;


ErrorMessage[] := (TabIdx = 3; ErrorMessage["Display"] = Style[
"Something went wrong during the import of the datafiles and/or the attemp to display the data.\nGo back to check the inputted parameters and datafiles, then try again.",
FontFamily->"Consolas",White,Background->Red];)


LoadButton[] :=
	Button[
		"Load files >>",
Check[(* The entire routine is wrapped in a Check. In case something goes wrong, TabIdx should not be incremented,
			the user should be prompted to go back and check his input*)
		(
			Do[Unset[Database[idx, i]], {idx, IRRanges + VISRanges}, {i, Cases[Keys[Database[idx]], _Integer]}];
			Do[Database[idx] = Join[Database[idx],
				ImportBIG[
					Database[idx, "Files"],
					Database[idx, "Init", "P0"],
					Database[idx, "Init", "A0"],
					Database[idx, "Init", "Depol"], 0.]
				], {idx, IRRanges}];
			Do[Database[idx] = Join[Database[idx], ImportVASE[Database[idx, "Files"]]], {idx, IRRanges + 1, IRRanges + VISRanges}];
			Do[Database[idx, "Corr"] = Join[Database[idx, "Corr"], <|"Depol" -> Database[idx,"Init", "Depol"]|>], {idx, IRRanges}];
			Do[
				If[Union[ToUpperCase /@ FileExtension /@ Database[idx, "Comp", "Files"]] === {"BIG"},
					With[
						{assoc = ImportBIG[Database[idx, "Comp", "Files"], Database[idx, "Comp", "P0"], Database[idx, "Comp", "A0"], 0., 0.]["Full"]},
						With[
							{
								comp = (assoc["Weight"]Tan[assoc["RhoShort"]]Tan[assoc["POLA"]] // Total)/assoc["TotalWeight"],
								xS = assoc["X"],
								xT = Database[idx, "Full", "X"]
							},
							Database[idx, "Corr", "Comp"] = -SmartResample[xS, xT, comp]
						]
					]];
				If[Union[ToUpperCase /@ FileExtension /@ Database[idx, "Comp", "Files"]] === {"EPD"},
					With[
						{assoc = ImportEPD[First@Database[idx, "Comp", "Files"]]},
						With[
							{
								comp = assoc["Rho"],
								xS = assoc["X"],
								xT = Database[idx, "Full", "X"]
							},
							Database[idx, "Corr", "Comp"] = -SmartResample[xS, xT, comp]
						]
					]];
				If[With[{exts = Union[ToUpperCase /@ FileExtension /@ Database[idx, "Comp", "Files"]]}, exts =!= {"BIG"} && exts =!= {"EPD"}],
					Database[idx, "Comp", "Files"] = {}],
				{idx, Select[Range[IRRanges], Database[#, "Comp", "Files"] =!= {}&]}
			]
			Do[
				Database[idx, "Corr", "Comp"] = 1.+0.I;
				If[MatchQ[Database[idx, "Corr", "dComp"], _Complex], Null, Database[idx, "Corr", "dComp"] = 1.+0.I],
				{idx, Select[Range[IRRanges], Database[#, "Comp", "Files"] === {}&]}
			];
			TabIdx++;
			ErrorMessage["Display"]="";
		),
ErrorMessage[]]
		,
		BaseStyle -> {16, GrayLevel[.75], FontFamily -> "Consolas"}, Background->Purple
	]


BrowseFilesButton[idx_] :=
	Button[
		"Browse\n...",
		With[
			{names=
				SystemDialogInput[
					"FileOpen",
					{
						FileNameTake[
							FirstCase[
								{{Database[idx,"Files"]}, Table[Database[i, "Files"], {i, IRRanges + VISRanges}]},
								_String, $UserDocumentsDirectory, {3}
							],
							{1,-2}
						],
						{If[idx <= IRRanges, "PSAr ellipsometry .big files" -> {"*.big"}, "Woollam .dat files" -> {"*.dat"}]}
					}
				]
			},
			If[names =!= $Canceled, Database[idx, "Files"] = Flatten[{names}]]
		],
		Background->Purple, BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, ImageSize->Automatic, Method->"Queued"
	]


SetAttributes[render, HoldAll];
render[preview_, selected_] :=
	Join[{MapThread[Function[{name,num},Button[name,preview=SortBy[preview,#[[num]]&]]],
			{{"Name","Comment","T","AOI","POLA","Scans","Resolution","Min","Max","Range"},Range[10]}]},
		Map[{Button[FileNameTake[#[[1]]],AppendTo[selected,#[[1]]]]}~Join~#[[2;;]]&, preview]] //
	Grid[#, Background -> {{GrayLevel[1], None, GrayLevel[1]},{{GrayLevel[0.85], RGBColor[0.88, 1, 0.88]}}}, Frame -> All]&


SetAttributes[remover,HoldFirst];
remover[list_] := Column@MapIndexed[Button[#,list=Delete[list,First@#2]]&,list]


preload[idx_]:=CreateDialog[

With[{path = FileNameTake[
				FirstCase[
					{{Database[idx,"Files"]}, Table[Database[i, "Files"], {i, IRRanges + VISRanges}]},
					_String, $UserDocumentsDirectory, {3}
				],
				{1,-2}]},
With[{dirs=FileNameJoin[FileNameSplit[path][[;;#]]]&/@Range[Length@FileNameSplit[path]]},

DynamicModule[
	{preview={},selected={},init=Select[#<>":\\"&/@CharacterRange["A","Z"],DirectoryQ],directoryTree,directorySubTree},
	Dynamic[
		Panel[
			Pane[
				Grid[{{Pane[Column[directoryTree/@init],{350,Full},Scrollbars->True],
					Pane[Dynamic[render[preview,selected]],{Full,800},Scrollbars->True],
					Column[{Dynamic[remover@selected],DefaultButton[DialogReturn[Database[idx,"Files"] = selected]]}]}}, Alignment->{Left,Top}],
				{Full,800},Scrollbars->{False,True},AppearanceElements->All,BaseStyle->LineBreakWithin->False
			],
			"Viewer"
		],
		UnsavedVariables :> {preview,directoryTree,directorySubTree},
		Initialization :> {
			selected={};
			preview={};
			directoryTree[root_String?DirectoryQ] :=
				DynamicModule[{open=MemberQ[dirs,root],subTree=If[MemberQ[dirs,root],directorySubTree[root],""]},
					PaneSelector[{
						False -> #,
						True -> Column[{#,
							Dynamic[subTree]}]}, Dynamic[open],ImageSize->Automatic] & [
						Row[{
							Opener[Dynamic[open,{Automatic,If[#,subTree=directorySubTree[root],subTree=.]&}]],
							MouseAppearance[EventHandler[
								FileNameTake[root],
								"MouseClicked":>(preview=scanDir[root]),Method->"Queued"],"LinkHand"]
						}]
					]
				];
			directorySubTree[root_String?DirectoryQ] :=
				Module[{subDirs,offset},
					subDirs = Quiet@Check[Select[FileNames["*",root],DirectoryQ],$Failed];
					offset=Grid[{{Invisible@Opener[],#}},Spacings->{0,0}]&;
					offset@Switch[subDirs,
						$Failed,Row[{Style["\[WarningSign]",20]," access denied"},BaseStyle->Orange],
						{},Style["\[FreakedSmiley]",Blue,20],
						_,Column[directoryTree/@Select[FileNames["*",root],DirectoryQ]]]
				]
		}
	]
] ] ] ]


BetterBrowseButton[idx_] :=
	Button["Browse\nbetter...", preload[idx]];


BrowseCompsButton[idx_/;idx<=IRRanges] :=
	Button[
		"Browse\n...",
		With[
			{names=
				SystemDialogInput[
					"FileOpen",
					{
						FileNameTake[
							FirstCase[
								{{Database[idx, "Comp", "Files"]}, Table[Database[i, "Comp", "Files"], {i, IRRanges}]},
								_String, $UserDocumentsDirectory, {3}
							],
							{1,-2}
						],
						{".big, .epd" -> {"*.big", "*.epd"}}
					}
				]
			},
			If[names =!= $Canceled, Database[idx, "Comp", "Files"] = Flatten[{names}]]
		],
		Background->Purple, BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, ImageSize->Automatic, Method->"Queued"
	];
BrowseCompsButton[_] := " ";

ClearCompsButton[idx_/;idx<=IRRanges] := 
	Button["Clear", Database[idx, "Comp", "Files"] = {}, Background->Purple, BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, ImageSize->Automatic];

ClearCompsButton[_] := " ";


InitCorrButton[] := 
	Button[
		If[MatchQ[Table[Database[idx, "Files"], {idx, IRRanges + VISRanges}], {{__String}..}], "Next >>", "Please select files for every range"],
		TabIdx++;,
		BaseStyle -> {16, GrayLevel[.75], FontFamily -> "Consolas"}, Background -> Purple,
		Enabled -> MatchQ[Table[Database[idx, "Files"], {idx, IRRanges + VISRanges}], {{__String}..}]
	]


CompSelector[i_] :=
	Grid[
		Table[
			{RadioButton[Dynamic[Database[i,"Comp","Type"]],iter[[2]]],iter[[1]]},
			{iter, 
				Switch[i, _ /; IRRanges == 1, {{"None/No Ref.", 0}},
					1, {{"None/No Ref.",0},{"Ref. to next",1}},
					IRRanges, {{"None/No Ref.",0},{"Ref. to prev.",-1}},
					_, {{"None/No Ref.",0},{"Ref. to next",1},{"Ref. to prev.",-1}}]}
		],
		Alignment->Left
	]


FileSelect[] :=
	Grid[
			{
				{
					MessageBox[$MessageFileSelect,{100,5}], SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft
				},
				{
					MessageBox["Set No.", {5,1}],
					MessageBox["Filenames",{30,1}],
					MessageBox["",{5,1}],
					MessageBox["Compensator",{10,1}],
					MessageBox["Compensator files",{30,1}],
					MessageBox["",{20,1}]
				},
				Sequence @@ Table[
					With[{i = i},
						{
							Style[i,16,GrayLevel[.75],FontFamily->"Consolas"],
							ScrollBox[Database[i, "Files"]//StringRiffle[#,"\n"]&,{30,5}],
							Column[{BrowseFilesButton[i],BetterBrowseButton[i]}],
							CompSelector[i],
							ScrollBox[Database[i, "Comp", "Files"]//StringRiffle[#,"\n"]&,{30,5}],
							Column[{BrowseCompsButton[i],ClearCompsButton[i]}]}],
					{i, 1, IRRanges}
				],
				Sequence @@ Table[
					With[{i = i},
						{
							Style[i,16,GrayLevel[.75],FontFamily->"Consolas"],
							ScrollBox[First@Flatten@{Database[i, "Files"],""}//StringRiffle[#,"\n"]&,{30,5}],
							BrowseFilesButton[i],
							"","",""}],
					{i, IRRanges + 1, IRRanges + VISRanges}
				],
				{BackButton[], InitCorrButton[], SpanFromLeft, SpanFromLeft, SpanFromLeft, SaveFileButton[]}
			},
			Spacings -> {0, 0},Alignment->{Center,Center},
			BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"},
			ItemSize -> Full, Frame -> All, Background -> Black
		];


CalibrationButton[idx_] :=
	Button["Find P0/A0", FindCorrectionsRoutine[idx], BaseStyle -> {16, GrayLevel[.75], FontFamily -> "Consolas"}, Background -> Purple]


CalibrationButton[idx_, "Comp"] :=
	Button["Find P0/A0", FindCorrectionsRoutine[idx, "Comp"], BaseStyle -> {16, GrayLevel[.75], FontFamily -> "Consolas"}, Background -> Purple]


InputParameters[] :=
	Grid[
		{
			Style[#,16,GrayLevel[.75],FontFamily->"Consolas"] & /@ {"Range","P0","A0","Depolarization degree","Calibration"},
			Sequence @@ Table[
				With[{i = i},
					{
						Style[i,16,GrayLevel[.75],FontFamily->"Consolas"],
						StyledField[Dynamic[Database[i,"Init","P0"]],Number],
						StyledField[Dynamic[Database[i,"Init","A0"]],Number],
						StyledField[Dynamic[Database[i,"Init","Depol"]],Hold[Expression]],
						CalibrationButton[i]
					}
				],
				{i, IRRanges}
			],
			Style[#,16,GrayLevel[.75],FontFamily->"Consolas"] & /@ {"Compensator", "P0", "A0", "Invert delta?","Calibration"},
			Sequence @@ Table[
				With[{i = i},
					{
						Style[i,16,GrayLevel[.75],FontFamily->"Consolas"],
						StyledField[Dynamic[Database[i,"Comp","P0"]],Number],
						StyledField[Dynamic[Database[i,"Comp","A0"]],Number],
						Checkbox[Dynamic[Database[i, "Flags", "InvertComp"]]],
						CalibrationButton[i, "Comp"]
					}
				],
				{i, Select[Range[IRRanges], Database[#, "Comp", "Files"] =!= {}&]}
			],
			{Style[#,16,GrayLevel[.75],FontFamily->"Consolas"] & @ "Coerce Delta to [-Pi; 0]?", SpanFromLeft},
			Sequence @@ Table[
				With[{i = i},
					{
						Style[i,16,GrayLevel[.75],FontFamily->"Consolas"],
						Checkbox[Dynamic[Database[i, "Flags", "CoerceDelta"]]],
						"", "", ""
					}
				],
				{i, IRRanges}
			],
			{BackButton[], LoadButton[], SpanFromLeft},
			{ErrorMessage["Display"], SpanFromLeft}
		}
	]


pr= <||>;
pr["Left"]=50.;
pr["Right"]=53000.;
pr["Bottom"]=-180.;
pr["Top"]=90.;


With[{s=Subtract,d=Divide},
	psiC = Compile[{{x,_Real},{aoi,_Real},{rho,_Complex}},
		d[ArcTan[Abs[rho]],Degree],
		RuntimeAttributes->{Listable},CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
	deltaC = Compile[{{x,_Real},{aoi,_Real},{rho,_Complex}},
		d[Arg[rho],Degree],
		RuntimeAttributes->{Listable},CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
	eps1C = Compile[{{x,_Real},{aoi,_Real},{rho,_Complex}},
		Re[Sin[aoi]^2(1.+(d[s[1.,rho],1.+rho]Tan[aoi])^2)],
		RuntimeAttributes->{Listable},CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
	eps2C = Compile[{{x,_Real},{aoi,_Real},{rho,_Complex}},
		Im[Sin[aoi]^2(1.+(d[s[1.,rho],1.+rho]Tan[aoi])^2)],
		RuntimeAttributes->{Listable},CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
	sig1C = Compile[{{x,_Real},{aoi,_Real},{rho,_Complex}},
		x Im[Sin[aoi]^2(1.+(d[s[1.,rho],1.+rho]Tan[aoi])^2)*0.0166782045],
		RuntimeAttributes->{Listable},CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
	sig2C = Compile[{{x,_Real},{aoi,_Real},{rho,_Complex}},
		Minus[x Re[s[Sin[aoi]^2(1.+(d[s[1.,rho],1.+rho]Tan[aoi])^2),1]*0.0166782045]],
		RuntimeAttributes->{Listable},CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
	ref1C = Compile[{{x,_Real},{aoi,_Real},{rho,_Complex}}, With[{n = Sqrt[Sin[aoi]^2(1.+(d[s[1.,rho],1.+rho]Tan[aoi])^2)]},
		100.*Abs[d[s[1.,n],1.+n]]^2],
		RuntimeAttributes->{Listable},CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
	ref2C = Compile[{{x,_Real},{aoi,_Real},{rho,_Complex}}, With[{n = Sqrt[Sin[aoi]^2(1.+(d[s[1.,rho],1.+rho]Tan[aoi])^2)]},
		d[Arg[d[s[1.,n],1.+n]],Degree]],
		RuntimeAttributes->{Listable},CompilationTarget->"C", RuntimeOptions->"Speed", Parallelization->True];
]


mIdxs := Range[IRRanges + VISRanges];


correctedRho[i_, lr_, pCorr_, aCorr_, dComp_] :=
	With[
		{
			comp = If[Database[i, "Flags", "InvertComp"], Conjugate, Identity][
				If[ListQ[Database[i,"Corr","Comp"]], Database[[i,"Corr","Comp",lr]], Database[i,"Corr","Comp"]]
			]
		},
		With[
			{
				result = Divide[
					Tan[Database[i,"Full","POLA"] + pCorr].(Database[[i,"Full","Weight",;;,lr]] Tan[Database[[i,"Full","RhoShort",;;,lr]] + aCorr]),
					comp dComp Database[[i,"Full","TotalWeight",lr]]
				]
			},
		If[Database[i, "Flags", "CoerceDelta"], Abs[result]Exp[-I Abs[Arg[result]]], result]
		]
	]


AdjustmentTab[] :=
	Grid[
		{
			{"Range", "P0", SpanFromLeft, "A0", SpanFromLeft, "dTheta", SpanFromLeft, "Left", SpanFromLeft, "Right",
				SpanFromLeft, "Comp-Psi", SpanFromLeft, "Comp-Del", SpanFromLeft},
			Sequence @@
				Table[
					With[
						{i = i},
						{
							i,
							Table[
								With[
									{f = f},
									{Slider[Dynamic[Database[i, "Corr", f]],{-5. Degree, 5. Degree, .01 Degree}, ImageSize->Small],
										Dynamic[PaddedForm[Chop@Database[i, "Corr", f]/Degree,{3,2}, NumberSigns->{"-","+"}]]}
								],
								{f, {"P0", "A0", "dTh"}}
							],
							{
								Slider[Dynamic[Database[i, "Corr", "Left"]],{0, .99}, ImageSize->Small],
								Dynamic[Part[Database[i, "Full", "X"], Database[i, "Corr", "Left"]*Database[i,"Meta", "Length"] + 1 // Ceiling]],
								Slider[Dynamic[Database[i, "Corr", "Right"]],{0, .99}, ImageSize->Small],
								Dynamic[Part[Database[i, "Full", "X"], Database[i,"Meta", "Length"](1 - Database[i, "Corr", "Right"]) // Floor]]
							}
							,
							{
								Slider[Dynamic[ArcTan@Abs@Database[i, "Corr", "dComp"],
									(Database[i, "Corr", "dComp"] = Sign[Database[i, "Corr", "dComp"]] * Tan[#])&],
										{.01 Pi, .49 Pi}, ImageSize->Small],
								Dynamic[PaddedForm[Chop@ArcTan@Abs@Database[i, "Corr", "dComp"]/Degree,{4,2}]],
								Slider[Dynamic[Arg@Database[i, "Corr", "dComp"],
									(Database[i, "Corr", "dComp"] = Abs[Database[i, "Corr", "dComp"]] * Exp[I #])&],
										{-Pi, +Pi}, ImageSize->Small],
								Dynamic[PaddedForm[Chop@Arg@Database[i, "Corr", "dComp"]/Degree,{5,2}]]
							}
						} // Flatten
					],
					{i, IRRanges}
			],
			Sequence @@
				Table[
					With[
						{i = i},
						{
							i, "", "", "", "",
							Table[
								With[
									{f = f},
									{Slider[Dynamic[Database[i, "Corr", f]],{-5. Degree, 5. Degree, .01 Degree}, ImageSize->Small],
										Dynamic[PaddedForm[Chop@Database[i, "Corr", f]/Degree,{3,2}, NumberSigns->{"-","+"}]]}
								],
								{f, {"dTh"}}
							],
							{
								Slider[Dynamic[Database[i, "Corr", "Left"]],{0, .99}, ImageSize->Small],
								Dynamic[Part[Database[i, "Full", "X"], Database[i, "Corr", "Left"]*Database[i,"Meta", "Length"] + 1 // Ceiling]],
								Slider[Dynamic[Database[i, "Corr", "Right"]],{0, .99}, ImageSize->Small],
								Dynamic[Part[Database[i, "Full", "X"], Database[i,"Meta", "Length"](1 - Database[i, "Corr", "Right"]) // Floor]]
							}, "", SpanFromLeft
						} // Flatten
					],
					{i, IRRanges + 1, IRRanges + VISRanges}
			],
			{Row@{"Plot: ", SetterBar[Dynamic[plotFunc],
				Thread[{ListPlot,ListLogLinearPlot}->{"Linear","Log"}],
				Background->Black],
				" Y values: ",SetterBar[Dynamic[funSel],
				Thread[{{psiC,deltaC},{eps1C,eps2C},{sig1C,sig2C},{ref1C,ref2C}}->{"PsiDelta","Epsilon","Sigma","Reflectivity"}],
				Background->Black],
			" X values: ",
				SetterBar[Dynamic[xSel,
					{
						({pr["Left"],pr["Right"]}=MinMax[InverseFunction[xSel][{pr["Left"],pr["Right"]}]])&,
						None,
						(xSel=#;{pr["Left"],pr["Right"]}=MinMax[xSel[{pr["Left"],pr["Right"]}]])&
					}],
				Thread[{#&, 0.000123984#&, 0.0299792458#&, 0.188365157#&, Divide[10000.,#]&, Log[2.71828,#]&}->{"cm-1","eV","THz","\[Omega]/\!\(\*SuperscriptBox[\(10\), \(12\)]\)","\[Mu]m","Log(wn)"}],
				Background->Black]}, SpanFromLeft},
			{
				Dynamic[
					plotFunc[
						With[{outY = Table[
							With[
								{
									cA0=Database[i,"Corr","A0"],
									cP0=Database[i,"Corr","P0"],
									lr = Span @@ MinMax[{
										Database[i, "Corr", "Left"]*Database[i,"Meta", "Length"] + 1 // Ceiling,
										Database[i,"Meta", "Length"](1 - Database[i, "Corr", "Right"]) // Floor
									}]
								}, correctedRho[i, lr, cP0, cA0, Database[i, "Corr", "dComp"]]],
								{i, IRRanges + VISRanges}],
							outX = Table[
								With[{lr = Span@@MinMax[{Database[i, "Corr", "Left"]*Database[i,"Meta", "Length"] + 1 // Ceiling,
										Database[i,"Meta", "Length"](1 - Database[i, "Corr", "Right"]) // Floor}]},
										Database[[i,"Full","X",lr]]],
								{i, IRRanges + VISRanges}],
							outAOI = Database[[mIdxs,"Full","AOI"]]+Database[[mIdxs,"Corr","dTh"]] // Values},
							With[{outYf1 = funSel[[1]][outX,outAOI,outY], outYf2 = funSel[[2]][outX,outAOI,outY]},
								Table[{xSel@outX[[i]],outYf1[[i]]}//Transpose,{i,IRRanges+VISRanges}]~Join~
									Table[{xSel@outX[[i]],outYf2[[i]]}//Transpose,{i,IRRanges+VISRanges}]~Join~
										Table[{xSel@#,#2}&@@MiddleDataTransfer[outX[[i]],outX[[i+1]],outYf1[[i]],outYf1[[i+1]]]//Transpose,
											{i, IRRanges + VISRanges - 1}]~Join~
											Table[{xSel@#,#2}&@@MiddleDataTransfer[outX[[i]],outX[[i+1]],outYf2[[i]],outYf2[[i+1]]]//Transpose,
												{i, IRRanges + VISRanges - 1}]
							]
						],
						PlotTheme->{"BackgroundColor", Black}, ImageSize -> {1400, 600}, PlotRange -> Map[pr, {{"Left","Right"},{"Bottom","Top"}},{2}],
						Joined->True,
						PlotStyle->Table[Thin,2(IRRanges + VISRanges)]~Join~Table[Dashed, 2(IRRanges + VISRanges - 1)],
						ImagePadding->40, AspectRatio->52/132
					]
				],SpanFromLeft
			},
			{Row[{BackButton[]," ", SaveFileButton[], " display limits: X: ",
				StyledField[Dynamic[pr["Left"],{None,None,({pr["Left"],pr["Right"]}=MinMax[{#,pr["Right"]}])&}],Number, ImageSize->{150,25}],
				StyledField[Dynamic[pr["Right"],{None,None,({pr["Left"],pr["Right"]}=MinMax[{pr["Left"],#}])&}],Number, ImageSize->{150,25}], "  Y: ",
				StyledField[Dynamic[pr["Bottom"],{None,None,({pr["Bottom"],pr["Top"]}=MinMax[{#,pr["Top"]}])&}],Number, ImageSize->{150,25}],
				StyledField[Dynamic[pr["Top"],{None,None,({pr["Bottom"],pr["Top"]}=MinMax[{pr["Bottom"],#}])&}],Number, ImageSize->{150,25}],
				OpenFileButton[],ToExportTab[]}
			],SpanFromLeft}
		},
		BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"},
		Background->Black, Frame -> All
	]


FileNameToSave = $UserDocumentsDirectory;


SaveFileRoutine[name_] := (BinaryWrite[name, Compress[{Database,IRRanges,VISRanges,TabIdx,pr}], "Character8"]; Close[name];)
OpenFileRoutine[name_] := Block[{merge,tIdx},
	({Database,IRRanges,VISRanges,tIdx,pr} = BinaryReadList[name,"Character8"]<>""//Uncompress);
	merge[{a1_Association,a2_Association}]:=Merge[{a1,a2},merge];
	merge[{a1_,a2_}]:=a1;
	merge[{a1_}]:=a1;
	Do[Database[i] = merge[{Database[i], $DBIRStructure}], {i, IRRanges}];
	Do[Database[i] = merge[{Database[i], $DBVISStructure}], {i, IRRanges + 1, IRRanges + VISRanges}];
	TabIdx = tIdx;]	

SaveFileButton[] :=
	Button[
		"Save project",
		With[
			{name =
				SystemDialogInput[
					"FileSave",
					{
						FileNameTake[FirstCase[{FileNameToSave}, _String, $UserDocumentsDirectory],{1,-2}],
						{"BIG Parser and Merger output format" -> {"*.bpm"}}
					}
				]
			},
			If[name =!= $Canceled, SaveFileRoutine[FileNameToSave = name]]
		],
		Background->Purple, BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, ImageSize->Automatic, Method->"Queued"
	]

OpenFileButton[] :=
	Button[
		"Load project",
		With[
			{name =
				SystemDialogInput[
					"FileOpen",
					{
						FileNameTake[FirstCase[{FileNameToSave}, _String, $UserDocumentsDirectory],{1,-2}],
						{"BIG Parser and Merger output format" -> {"*.bpm"}}
					}
				]
			},
			If[name =!= $Canceled, OpenFileRoutine[FileNameToSave = name]]
		],
		Background->Purple, BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, ImageSize->Automatic, Method->"Queued"
	]


ExportTab[] := If[mergingComplete, 
						With[{outY = Table[
							With[
								{
									cA0=Database[i,"Corr","A0"],
									cP0=Database[i,"Corr","P0"],
									lr = Span @@ MinMax[{
										Database[i, "Corr", "Left"]*Database[i,"Meta", "Length"] + 1 // Ceiling,
										Database[i,"Meta", "Length"](1 - Database[i, "Corr", "Right"]) // Floor
									}]
								}, correctedRho[i, lr, cP0, cA0, Database[i, "Corr", "dComp"]]],
								{i, IRRanges + VISRanges}],
							outX = Table[
								With[{lr = Span@@MinMax[{Database[i, "Corr", "Left"]*Database[i,"Meta", "Length"] + 1 // Ceiling,
										Database[i,"Meta", "Length"](1 - Database[i, "Corr", "Right"]) // Floor}]},
										Database[[i,"Full","X",lr]]],
								{i, IRRanges + VISRanges}],
							outAOI = Database[[mIdxs,"Full","AOI"]]+Database[[mIdxs,"Corr","dTh"]] // Values},
							With[{outYf1 = eps1C[outX,outAOI,outY], outYf2 = eps2C[outX,outAOI,outY], outP = psiC[outX,outAOI,outY], outD = deltaC[outX,outAOI,outY]},
								With[{
									outTable1 = 
										SortBy[DeleteDuplicatesBy[Join@@
				(Table[MiddleDataTransfer[outX[[i]],outX[[i+1]],outYf1[[i]],outYf1[[i+1]]]//Transpose, {i, IRRanges + VISRanges - 1}]~Join~
					Table[{outX[[i]],outYf1[[i]]}//Transpose,{i,IRRanges+VISRanges}]),First],First],
									outTable2 =
										SortBy[DeleteDuplicatesBy[Join@@
				(Table[MiddleDataTransfer[outX[[i]],outX[[i+1]],outYf2[[i]],outYf2[[i+1]]]//Transpose, {i, IRRanges + VISRanges - 1}]~Join~
					Table[{outX[[i]],outYf2[[i]]}//Transpose,{i,IRRanges+VISRanges}]),First],First],
									outTableA =
										SortBy[DeleteDuplicatesBy[Join@@
				(Table[MiddleDataTransfer[
						outX[[i]],
						outX[[i+1]],
						Cos[ outAOI[[i]]~Table~Length[ outX[[i]] ] ]^2,
						Cos[ outAOI[[i+1]]~Table~Length[ outX[[i+1]] ] ]^2
					] // Transpose, {i, IRRanges + VISRanges - 1}]~Join~
					Table[{outX[[i]],Cos[outAOI[[i]]~Table~Length[outX[[i]]]]^2} // Transpose,{i,IRRanges+VISRanges}]),First],First] //
						Transpose // {#, Divide[ArcCos[Sqrt[#2]],Degree]}& @@ # & // Transpose,
									outTableP =
										SortBy[DeleteDuplicatesBy[Join@@
				(Table[MiddleDataTransfer[outX[[i]],outX[[i+1]],outP[[i]],outP[[i+1]]]//Transpose, {i, IRRanges + VISRanges - 1}]~Join~
					Table[{outX[[i]],outP[[i]]}//Transpose,{i,IRRanges+VISRanges}]),First],First],
									outTableD =
										SortBy[DeleteDuplicatesBy[Join@@
				(Table[MiddleDataTransfer[outX[[i]],outX[[i+1]],outD[[i]],outD[[i+1]]]//Transpose, {i, IRRanges + VISRanges - 1}]~Join~
					Table[{outX[[i]],outD[[i]]}//Transpose,{i,IRRanges+VISRanges}]),First],First]},
Grid[{
		{
		ListLogLinearPlot[
			{outTable1, outTable2},
			PlotTheme->{"BackgroundColor", Black}, ImageSize -> {1400, 400}, PlotRange -> Automatic, Joined->True, ImagePadding->40, AspectRatio->32/132,
			PlotLabel->"\!\(\*SubscriptBox[\(\[CurlyEpsilon]\), \(1\)]\) and \!\(\*SubscriptBox[\(\[CurlyEpsilon]\), \(2\)]\) for export"],
		SpanFromLeft},
		{
		ListLogLinearPlot[
			outTableA,
			PlotTheme->{"BackgroundColor", Black}, ImageSize -> {1400, 300}, PlotRange -> {Automatic, Full}, Joined->False, ImagePadding->40, AspectRatio->22/132,
			PlotLabel->"Effective angle of incidence vs. frequency"],
		SpanFromLeft},
		{Row[{
			"Data OK: ", outTable1[[;;,1]] == outTable2[[;;,1]] == outTableA[[;;,1]]," | ",
			"Energy units:", PopupMenu[Dynamic[saveParams["Energy"]],
				Thread[{#&, 0.000123984#&, 0.0299792458#&, 0.188365157#&, Divide[10000.,#]&}->{"cm-1","eV","THz","10^12 rad/s","\[Mu]m"}]
			],
			"  Psi:", Checkbox[Dynamic[saveParams["Psi"]]],
			"  Del:", Checkbox[Dynamic[saveParams["Del"]]],
			" Eps1:", Checkbox[Dynamic[saveParams["Eps1"]]],
			" Eps2:", Checkbox[Dynamic[saveParams["Eps2"]]],
			" Sig1:", Checkbox[Dynamic[saveParams["Sig1"]]],
			" Sig2:", Checkbox[Dynamic[saveParams["Sig2"]]],
			"  AOI:", Checkbox[Dynamic[saveParams["AOI"]]],
			" Include header:", Checkbox[Dynamic[saveParams["Header"]]], " | ",
		FromExportTab[]}], SpanFromLeft},
		{ExportDirectoryButton[], MessageBox[ToString@exportDir, {40,1}], Column[{"Filename", StyledField[Dynamic[exportFile],String], ""}],".bps",
			ExportSpectrumButton[
				{outTableA[[;;,1]],outTable1[[;;,2]],outTable2[[;;,2]],outTableA[[;;,2]],outTableP[[;;,2]],outTableD[[;;,2]]} // {
					saveParams["Energy"]@#,
					If[saveParams["Psi"],#5,Nothing],
					If[saveParams["Del"],#6,Nothing],
					If[saveParams["Eps1"],#2,Nothing],
					If[saveParams["Eps2"],#3,Nothing],
					If[saveParams["Sig1"],0.0166782045 # #3,Nothing],
					If[saveParams["Sig2"],0.0166782045 # (Subtract[1,#2]),Nothing],
					If[saveParams["AOI"],#4,Nothing]
				} & @@ # & // Transpose
			],
		SpanFromLeft},
		{SpanFromAbove, SpanFromAbove, SpanFromAbove, "-e1.dat\n-e2.dat",
			ExportWASFButton[{outTableA[[;;,1]],outTable1[[;;,2]],outTable2[[;;,2]]}//Transpose], SpanFromLeft}
	},
	BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, Background->Black, Frame -> All, Alignment->{Center, Center}
]
						]
					]],""]


ExportWASFButton[data_] :=
	Button["Export WASF",
		With[{strm1 = OpenWrite[FileNameJoin[{exportDir,exportFile<>"-e1.dat"}]],
				strm2 = OpenWrite[FileNameJoin[{exportDir,exportFile<>"-e2.dat"}]]},
			WriteString[strm1,StringRiffle[data[[;;,{1,2}]],"\n","\t"]];
			Close[strm1];
			WriteString[strm2,StringRiffle[data[[;;,{1,3}]],"\n","\t"]];
			Close[strm2];
		],
		Background->Purple, BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, ImageSize->Automatic, Method->"Queued"
	]


ExportFileHeader[] :=
	With[
		{
			procVal =
				Which[
					#3 === "Corr" && #4 =!= "Depol", Chop[#[##2]/Degree],
					#4 === "Depol", ReleaseHold[#[##2]] /. {l_List -> "List", r_Real :> ToString[Round[1000 r]] <> " per 1000", f_Function -> "Function"},
					True, #[##2]
				] &,
			db := Database,
			toTab = ImportString[ExportString[#,"Table","FieldSeparators"->" ",Alignment->#2,"TextDelimiters"->{"",""}],"Lines"]&},
	Join@@(Table[
		toTab[{{"Range",i, " ", " ", " "}, {"Frequencies from",SetPrecision[Min[db[i,"Full","X"]],5],"to",SetPrecision[Max[db[i,"Full","X"]],5], "cm-1"},
				{"Using data from"}~Join~
					Riffle[SetPrecision[Part[db[i,"Full","X"],MinMax[{db[i, "Corr", "Left"]*db[i,"Meta", "Length"] + 1 // Ceiling,
					db[i,"Meta", "Length"](1 - db[i, "Corr", "Right"]) // Floor}]],5],"to"]~Join~{"cm-1"}}, Right]
		~Join~{" "}~Join~
		toTab[Union@(Thread[{If[i>IRRanges,First,Identity]@db[[i,"Files"]],SetPrecision[db[[i,"Full","AOI"]]/Degree,3],"/",
			SetPrecision[db[[i,"Full","POLA"]]/Degree+db[[i,"Init","P0"]],3]}])~Prepend~{"Filename","AOI","/","POLA"},Left]
		~Join~{" "}~Join~
		toTab[SetPrecision[ArrayFlatten[{{"Corrections",{{"P0","A0","Depol","AOI"}}},{{{"Initial"},{"Interactive"}},
			Table[
				procVal[db, i, key1, key2],
				{key1,{"Init","Corr"}},
				{key2,{"P0","A0","Depol","dTh"}}]/._Missing->0.}}],3]/. 0->0.,Right]~Join~
		{"---"},
		{i, IRRanges + VISRanges}]~Join~{{
		saveParams["Energy"]/.Thread[{#&, 0.000123984#&, 0.0299792458#&, 0.188365157#&, Divide[10000.,#]&}->{"cm-1","eV","THz","10^12 rad/s","um"}],
		If[saveParams["Psi"],"Psi",Nothing],
		If[saveParams["Del"],"Del",Nothing],
		If[saveParams["Eps1"],"Eps1",Nothing],
		If[saveParams["Eps2"],"Eps2",Nothing],
		If[saveParams["Sig1"],"Sig1",Nothing],
		If[saveParams["Sig2"],"Sig2",Nothing],
		If[saveParams["AOI"],"AOI",Nothing]
		}})
	]


ExportSpectrumButton[data_] :=
	Button["Export",
		With[{strm = OpenWrite[FileNameJoin[{exportDir,exportFile<>".bps"}]]},
			If[saveParams["Header"],
				WriteLine[strm, ToString[Length[ExportFileHeader[]] + 2] <> " header lines"];
				WriteLine[strm, ""<>("*"~Table~15)];
				Do[WriteLine[strm,line],{line,ExportFileHeader[]}]
			];
			WriteString[strm,StringRiffle[data,"\n","\t"]];
			Close[strm];
		],
		Background->Purple, BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, ImageSize->Automatic, Method->"Queued"
	]


ExportDirectoryButton[] :=
	Button[
		"Select\ndirectory",
		With[
			{expDir =
				SystemDialogInput[
					"Directory",
					
						FirstCase[
							{exportDir},
							_String, $UserDocumentsDirectory
						]
					
				]
			},
			If[expDir =!= $Canceled, exportDir = expDir]
		],
		Background->Purple, BaseStyle->{16,GrayLevel[.75],FontFamily->"Consolas"}, ImageSize->Automatic, Method->"Queued"
	]


End[];


MergingInterface[] := 
	CreateDialog[
		MenuView[{
				"Spectral ranges"->`MergingInterface`Ranges[],
				"Datafiles"->Dynamic[`MergingInterface`FileSelect[]],
				"Parameters"->Dynamic[`MergingInterface`InputParameters[]],
				"Interactive merging"->Dynamic[`MergingInterface`AdjustmentTab[]],
				"Function construction"->Dynamic[`MergingInterface`ExportTab[]](*,
				"Export"\[Rule]qualityCheckTab*)
			},
			Dynamic[`MergingInterface`TabIdx],
			ImageSize->Automatic,Background->Black, BaseStyle->{16, FontFamily->"Consolas",GrayLevel[.75]},
			FrameMargins->None, ImageMargins->0, Enabled->False],
			WindowSize->{1560,1000}, Background->Black, WindowMargins->0,
			WindowElements->"VerticalScrollBar",
			WindowFrameElements->{"CloseBox","ZoomBox","MinimizeBox","ToolbarBox","DocumentIcon","ResizeArea"},
			ScrollingOptions->{"VerticalScrollRange"->FitAll}
	];


(* ::Subsection:: *)
(*End and protect symbols*)


End[];


Protect[Evaluate[$Context<>"*"]];


EndPackage[];
